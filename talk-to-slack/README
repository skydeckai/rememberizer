
# Talk to Slack: A Simple AI Integration App

## Overview

Talk to Slack enhances your Slack experience through the integration of OpenAI's LLM and Rememberizer.ai, facilitating seamless interactions and efficient query processing within Slack.

## Features

- **Flask-based Architecture** : Utilizes Flask for backend operations, including frontend communications, Rememberizer authorization callbacks, and OpenAI API interactions.
- **OAuth2 Integration**: Secure authorization and data access through the Rememberizer OAuth2 flow.
- **Slack Data Access**: Fetches user's connected Slack data securely using Rememberizer's APIs.
- **OpenAI LLM Integration**: Delivers insightful responses by processing queries with OpenAI's LLM service.
- **Intuitive User Interface**: Modern UI design for easy navigation and interaction.
- **Best Practices**: Adheres to security and user experience standards, ensuring seamless integration between the app, Rememberizer, and OpenAI.

## Setup and Deployment

### Prerequisites

- Python
- Flask

### Environment Configuration

Set these environment variables:

- `APP_SECRET_KEY`: Unique secret key for Flask.
- `REMEMBERIZER_CLIENT_ID`: Client ID for your Rememberizer app.
- `REMEMBERIZER_CLIENT_SECRET`: Client secret for your Rememberizer app.
- `OPENAI_API_KEY`: Your OpenAI API key.

### Running the Application

1. **Start Flask App**: Run `flask run` in the terminal and access the app at `http://localhost:5000`.

### Deploying to the Cloud

Deployment to a cloud platform like Heroku, Google Cloud Platform (GCP), Amazon Web Services (AWS), or Microsoft Azure is recommended.

#### Heroku Deployment

1. **Create a Heroku Account**: Install the Heroku CLI.
2. **Prepare Your Application**: Ensure a `Procfile`, `runtime.txt`, and `requirements.txt` are present.
3. **Deploy**: Use the Heroku CLI or GitHub integration for deployment.

##### Detailed Steps

- **Connect Heroku to GitHub**: Enable automatic deploys from the GitHub repository for seamless updates.
- **Deploy Manually**: Optionally, use manual deployment for more control.

###### Additional Setup

- Install Heroku CLI: `brew tap heroku/brew && brew install heroku` (macOS).
- Add SSL certificates: Use self-signed certificates for initial HTTPS setup.
- Configure Environment Variables on Heroku: Use `heroku config:set KEY=value` for essential keys.

#### Other Cloud Platforms

- **GCP**: Set up a GCP account, prepare your app with `app.yaml`, and deploy using `gcloud app deploy`.
- **AWS**: Use Elastic Beanstalk for deployment after setting up an AWS account and the AWS CLI.
- **Azure**: Deploy through Azure App Service after creating an Azure account and installing the Azure CLI.

### Security and Best Practices

Before deployment, verify your `requirements.txt`, adjust configurations for production, and update OAuth redirect URIs.

## Additional Notes

- **Iconography**: Designed with a detailed folded paper art style, reflecting AI and communication integration.
- **SSL Configuration**: Generate self-signed certificates using OpenSSL for secure communication.

## Explore and Innovate

We encourage exploration and innovation with Talk to Slack, aiming to enhance productivity and collaboration within Slack.


This revised version organizes the information more clearly, uses Markdown formatting to enhance readability, and corrects some formatting inconsistencies. It's designed to render well on GitHub, presenting the information in an engaging and structured manner.

###### Application Code Notes

__@app.route('/') (Index Route):__  

This route renders the index.html template when the root URL (/) is accessed. It serves as the homepage of your application.

__@app.route('/auth/rememberizer') (Rememberizer Authentication Route):__  

This route initiates the OAuth2 authentication process with Rememberizer.ai. It generates a random state value, stores it in the session, constructs the authorization URL with the necessary parameters (client ID, redirect URI, scope, and state), and redirects the user to Rememberizer.ai's authorization page.

__@app.route('/auth/rememberizer/callback') (Rememberizer Callback Route):__  

This route handles the callback from Rememberizer.ai after the user has authorized your application. It extracts the authorization code from the query parameters, exchanges it for an access token using Rememberizer.ai's token endpoint, and stores the access token in the session. Then, it redirects the user to the /dashboard route.

__@app.route('/dashboard') (Dashboard Route):__  

This route displays the dashboard page to the user. It checks if the user has an access token in the session; if not, it redirects them to the authentication route. If the user is authenticated, it makes a request to Rememberizer.ai's account endpoint to retrieve account information and renders the dashboard.html template with this information.


__@app.route('/slack-info') (Slack Integration Info Route):__  

This route shows information about the user's Slack integration with Rememberizer.ai. It checks for an access token and makes a request to Rememberizer.ai's integrations endpoint to get the integration data. It then renders the slack_info.html template with this data.  

__@app.route('/ask', methods=['POST']) (Ask Route):__  

This route handles the submission of questions from the user. It checks for an access token, retrieves the user's question from the form data, and makes a request to Rememberizer.ai's document search endpoint to find relevant information. It then uses OpenAI's GPT-4 model to generate an answer based on the question and the search results. The answer is rendered in the answer.html template.
